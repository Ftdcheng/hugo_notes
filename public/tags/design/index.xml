<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design on Citrus Cheng&#39;s wiki</title>
    <link>https://example.org/tags/design/</link>
    <description>Recent content in Design on Citrus Cheng&#39;s wiki</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>程序员读代码的禅与修炼</title>
      <link>https://example.org/posts/design/how-to-read-code/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/design/how-to-read-code/</guid>
      <description>&lt;h1 id=&#34;程序员读代码的禅与修炼&#34;&gt;程序员读代码的禅与修炼&lt;/h1&gt;
&lt;h2 id=&#34;-前言&#34;&gt;🧭 前言&lt;/h2&gt;
&lt;p&gt;代码是自然语言的压缩饼干，阅读它，是一场意志与智慧的博弈。本指南旨在为你提供一套实用、进阶、符合工程思维的代码阅读方法论。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-1-先读文档再读代码&#34;&gt;📌 1. 先读文档，再读代码&lt;/h2&gt;
&lt;h3 id=&#34;推荐优先阅读材料&#34;&gt;推荐优先阅读材料：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;README / Wiki / 项目介绍页&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md（可见贡献规范）&lt;/li&gt;
&lt;li&gt;Issues 与 Pull Requests（可见设计动因与变更历史）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理由&#34;&gt;理由：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这些内容提供了高层抽象和开发意图，有助于你构建上下文框架，避免盲目深潜。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-2-能跑才好读&#34;&gt;🧪 2. 能跑，才好读&lt;/h2&gt;
&lt;h3 id=&#34;做到以下几点&#34;&gt;做到以下几点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能顺利构建并运行项目（甚至部署）&lt;/li&gt;
&lt;li&gt;能使用调试工具或 log 打印控制信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理由-1&#34;&gt;理由：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;死代码是死的，动态运行才有灵魂。调试是观察代码行为的显微镜。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-3-明确阅读目标&#34;&gt;🎯 3. 明确阅读目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是为了修 bug，还是加功能？&lt;/li&gt;
&lt;li&gt;是为了学习架构，还是了解具体模块？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有目标就能舍弃 90% 的无关细节，聚焦你需要的部分。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-4-bfs--dfs-的阅读策略&#34;&gt;🧠 4. BFS &amp;gt; DFS 的阅读策略&lt;/h2&gt;
&lt;h3 id=&#34;不要陷入深度优先&#34;&gt;不要陷入深度优先：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;沿着一条调用链不断深入容易迷路。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;要采用广度优先&#34;&gt;要采用广度优先：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;快速过一遍目录结构、模块分布、关键函数。先看“路网图”，再看细节。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-5-分块阅读构建模块地图&#34;&gt;🧱 5. 分块阅读：构建“模块地图”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;观察文件结构、类和函数边界&lt;/li&gt;
&lt;li&gt;分析模块的职责划分（谁负责输入、谁负责输出）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;熟悉块的边界感，就像会认字就能阅读文章。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-6-管理你的大脑记忆资源&#34;&gt;🧵 6. 管理你的大脑记忆资源&lt;/h2&gt;
&lt;p&gt;类比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作记忆 = 寄存器&lt;/li&gt;
&lt;li&gt;短期记忆 = RAM&lt;/li&gt;
&lt;li&gt;长期记忆 = 硬盘&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;技巧&#34;&gt;技巧：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;精简当前需要记住的信息（只记主逻辑）&lt;/li&gt;
&lt;li&gt;将常用 API、框架结构固化为长期记忆&lt;/li&gt;
&lt;li&gt;用笔记或注释辅助记忆缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-7-把代码当成自然语言来读&#34;&gt;🧩 7. 把代码当成自然语言来读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;命名风格是“句法”&lt;/li&gt;
&lt;li&gt;缩进结构是“语调”&lt;/li&gt;
&lt;li&gt;注释内容是“修辞”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文献阅读技巧可迁移&#34;&gt;文献阅读技巧可迁移：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;找主语（谁调用谁）&lt;/li&gt;
&lt;li&gt;找动词（干了啥）&lt;/li&gt;
&lt;li&gt;找逻辑连接词（if, while, for 等控制结构）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-8-进阶技巧-bonus&#34;&gt;✨ 8. 进阶技巧 Bonus&lt;/h2&gt;
&lt;h3 id=&#34;-制作项目地图&#34;&gt;📐 制作项目“地图”&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 markdown / 画图记录模块间的关系图&lt;/li&gt;
&lt;li&gt;使用 PlantUML / Mermaid 绘制调用图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-卡片式阅读笔记&#34;&gt;🗃️ 卡片式阅读笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个模块/函数做成一张卡片，写用途 + 结构 + 接口&lt;/li&gt;
&lt;li&gt;下次切换项目时秒级上手&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-预测-vs-验证&#34;&gt;🔁 预测 vs 验证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;猜代码逻辑，调试验证对错，训练直觉与分析力&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-总结&#34;&gt;🧘 总结&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;读代码，是在理解另一个灵魂的思考方式。是跨越语言、跨越思维模型的深度连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>银弹是什么梗</title>
      <link>https://example.org/posts/design/silver-bullet/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/design/silver-bullet/</guid>
      <description>&lt;h1 id=&#34;银弹是什么梗&#34;&gt;银弹是什么梗&lt;/h1&gt;
&lt;p&gt;哈哈哈，银弹（&lt;strong&gt;silver bullet&lt;/strong&gt;）这个梗，程序员要是不知道，那就跟骑士不知道 Excalibur 一样离谱！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;银弹原梗出自哪&#34;&gt;🌕【银弹】原梗出自哪？&lt;/h2&gt;
&lt;p&gt;银弹最早是&lt;strong&gt;西方传说&lt;/strong&gt;里专门用来对付狼人（werewolf）的武器——&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“普通的武器对狼人无效，只有银子铸的子弹才能一枪爆头。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;🌙 所以，“银弹”就成了 &lt;strong&gt;“唯一能解决棘手问题的终极武器”&lt;/strong&gt; 的代名词。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-那跟程序员有什么关系&#34;&gt;💻 那跟程序员有什么关系？&lt;/h2&gt;
&lt;p&gt;来自软件工程界不朽经典文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;No Silver Bullet&amp;rdquo;（1986）&lt;/strong&gt;&lt;br&gt;
作者：Fred Brooks（布鲁克斯，写过《人月神话》）&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;文章核心观点是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“软件工程中&lt;strong&gt;没有银弹&lt;/strong&gt;，没有哪个技术、语言、工具能&lt;strong&gt;一次性解决所有复杂性问题&lt;/strong&gt;。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;☠️ 换句话说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有神级框架能帮你永远不踩坑&lt;/li&gt;
&lt;li&gt;没有完美语言能兼顾性能、抽象、易学&lt;/li&gt;
&lt;li&gt;没有任何库能让并行编程像写 for 循环那么轻松&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这句话打碎了很多人对“万能工具”的幻想，所以后来：&lt;/p&gt;
&lt;p&gt;🧠 “银弹”就变成了程序员之间用来调侃那种“看起来能解决一切问题的技术”的 &lt;strong&gt;反讽梗&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-使用场景举几个例子梗味上头&#34;&gt;🐶 使用场景举几个例子（梗味上头）：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A：“我们是不是可以用 Rust 重构所有 C++ 模块？”&lt;/li&gt;
&lt;li&gt;B：“你是觉得 Rust 是银弹吗？”&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;A：“有了这个 AutoGPT，我们啥都不用写了！”&lt;/li&gt;
&lt;li&gt;B：“又一颗银弹飞来了🐴”&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;A：“把这个动态点检测改成 Transformer，准确率、泛用性、实时性全解决。”&lt;/li&gt;
&lt;li&gt;B：“老哥你这颗银弹……别真把系统打穿了。”&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-结尾小诗&#34;&gt;🧩 结尾小诗：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;银弹一发解千愁，&lt;br&gt;
实际一堆 bug 在后头。&lt;br&gt;
工程之道无神兵，&lt;br&gt;
拔剑还得靠双手。🗡️&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;有没有哪个你以为是银弹的技术，结果啪啪打脸？可以一起来吐槽一波 😎&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
